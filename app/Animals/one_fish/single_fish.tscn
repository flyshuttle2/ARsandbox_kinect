[gd_scene load_steps=7 format=3 uid="uid://buut758lfwuk4"]

[ext_resource type="Script" path="res://Animals/one_fish/fish.gd" id="1_kbvh8"]
[ext_resource type="ArrayMesh" uid="uid://c6sylt7ph5lge" path="res://Animals/one_fish/fish_mesh.obj" id="2_gp71v"]
[ext_resource type="Texture2D" uid="uid://xa62c7ux4qfu" path="res://Animals/one_fish/fish_mesh.jpg" id="3_2k70e"]
[ext_resource type="Script" path="res://Animals/one_fish/fish_mesh.gd" id="4_qfmm6"]

[sub_resource type="Shader" id="Shader_etl1v"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta2's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float side_to_side_factor = 0.002;
uniform float wave_factor = 0.2;
uniform float pivot_factor = 4.0;
uniform float twist_factor = 1.0;
uniform float swim_factor = 0.01;
uniform float swim_max = 55.0;
uniform float body_length = 2.0;

uniform float mask_black = -1.0;
uniform float mask_white = 1.0;
// fish params


uniform float frequency;
uniform float fish_timer;

varying vec4 FISH_COLOR;

void vertex() {
	//FISH_COLOR = INSTANCE_CUSTOM;
	//float time = TIME * (0.5 + INSTANCE_CUSTOM.y) * time_factor + 6.28318 * INSTANCE_CUSTOM.x;
	// Side to side movement
	//VERTEX.x += cos(time) * side_to_side_factor;
	//mat2 matrix_pivot = mat2(
	//	vec2(cos(pivot_angle), -sin(pivot_angle)),
	//	vec2(sin(pivot_angle),  cos(pivot_angle))
	//);
	//VERTEX.xz *= matrix_pivot;
	
	float tmult_0 = fish_timer * frequency;
	float tmult = sin( fish_timer * frequency );
	
	vec3 new_pos = VERTEX;
	vec3 tmp = VERTEX;



	

	
	//鱼横向移动。0.002这个数值，控制移动的距离  coef_move_range
	//new_pos.x  = tmp.x + tmult * 0.000005;  
	
	new_pos.x  = tmp.x  + tmult * side_to_side_factor; 
	
	//鱼横向移动时，头的方向做旋转。pivot_factor 4.0这个数值，控制旋转的角度 coef_rotation_angle
	float pivot_angle = tmult * 0.1 * pivot_factor;
	mat2 rotation_matrix = mat2(vec2(cos(pivot_angle), -sin(pivot_angle)), vec2(sin(pivot_angle), cos(pivot_angle)));
	new_pos.xz = rotation_matrix * new_pos.xz;
	
	//实现摆尾效果。设置摆尾变量body. 在鱼尾巴处，这个变量的值是0，在鱼头处，这个变量的值是1，代表不动。（也可以颠倒过来表示）
	float body = (VERTEX.z + body_length * 0.5) / body_length; //for a fish centered at (0, 0) with a length of 2
	
	//smoothstep是插值函数
	float mask = smoothstep(mask_black, mask_white, 1.0 - body);
	
	// wave_factor 0.2控制摆尾的幅度；8.0控制也是，因类计时器和body摆尾变量的数值尺度不相同，因此需要两个变量来调配。
	new_pos.x += cos(tmult_0 + body * 8.0) * mask * wave_factor;
	
	// Twist motion
	float twist_angle = cos(tmult_0 + body) * 0.3 * twist_factor;
	mat2 matrix_twist = mat2(
		vec2(cos(twist_angle), -sin(twist_angle)),
		vec2(sin(twist_angle), cos(twist_angle))
	);
	new_pos.xy = mix(new_pos.xy, matrix_twist * new_pos.xy, mask);
	new_pos.z += mod(tmult_0, swim_max) * swim_factor;
	
	
	VERTEX = new_pos;
	
	// UV
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	
	


	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}







void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y6mxr"]
render_priority = 0
shader = SubResource("Shader_etl1v")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/side_to_side_factor = 0.002
shader_parameter/wave_factor = 0.2
shader_parameter/pivot_factor = 4.0
shader_parameter/twist_factor = 1.0
shader_parameter/swim_factor = 0.01
shader_parameter/swim_max = 55.0
shader_parameter/body_length = 2.0
shader_parameter/mask_black = -1.0
shader_parameter/mask_white = 1.0
shader_parameter/frequency = 2.0
shader_parameter/fish_timer = 2753.44
shader_parameter/texture_albedo = ExtResource("3_2k70e")

[node name="one_fish" type="Node3D"]
script = ExtResource("1_kbvh8")

[node name="fish_mesh" type="MeshInstance3D" parent="."]
transform = Transform3D(-0.2, 0, -3.01992e-08, 0, 0.2, 0, 3.01992e-08, 0, -0.2, 0, 0, 0)
mesh = ExtResource("2_gp71v")
surface_material_override/0 = SubResource("ShaderMaterial_y6mxr")
script = ExtResource("4_qfmm6")
